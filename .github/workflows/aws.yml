name: Deploy Medusa Store to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ECS_CLUSTER: medusa-cluster
      ECS_SERVICE: medusa-service
      CONTAINER_NAME: medusa-container
      ECS_TD: ecs-task-definition.json

    steps:
      # ✅ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ✅ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Build Docker image
      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ronikgandhi/medusa-store:latest .
          echo "image=ronikgandhi/medusa-store:latest" >> $GITHUB_OUTPUT

      # ✅ Push Docker image
      - name: Push Docker image to Docker Hub
        run: |
          docker push ronikgandhi/medusa-store:latest

      # ✅ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ✅ Write ECS task definition JSON
      - name: Write ECS task definition file
        run: |
          cat > ecs-task-definition.json <<EOF
          {
            "family": "medusa-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "medusa-container",
                "image": "ronikgandhi/medusa-store:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

      # ✅ Fill in the new image ID in the ECS task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-1
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # ✅ Deploy the new task definition to ECS service
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-1.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true
